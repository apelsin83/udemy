/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala library project to get you started.
 * For more details take a look at the Scala plugin chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/scala_plugin.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'ch.epfl.scala:gradlebloop212_2.12:1.3.2'
    }
}


plugins {
    // Apply the scala plugin to add support for Scala
    id 'scala'
    id 'base'
    id 'application'
    id 'com.diffplug.gradle.spotless' version '3.24.1'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use Scala 2.12 in our library project
    implementation 'org.scala-lang:scala-library:2.12.8'

    // Use Scalatest for testing our library
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.12:3.0.7'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.12:1.2.0'

}


allprojects {
   apply plugin: bloop.integrations.gradle.BloopPlugin
   afterEvaluate {
        configurations {
            scalaCompilerPlugin
        }
        dependencies {
            scalaCompilerPlugin "org.scalameta:semanticdb-scalac_2.12.8:4.2.0"
        }
        def pluginFile = project.configurations.scalaCompilerPlugin.find {
            it.name.contains("semanticdb")
        }
        if (!pluginFile) {
            throw new RuntimeException("SemanticDB plugin not found!")
        }
        tasks.withType(ScalaCompile) {
            def params = [
                '-Xplugin:' + pluginFile.absolutePath,
                '-P:semanticdb:synthetics:on',
                '-P:semanticdb:failures:warning',
                '-P:semanticdb:sourceroot:' + project.rootProject.projectDir,
                '-Yrangepos',
                '-Xplugin-require:semanticdb'
            ]
            if (scalaCompileOptions.additionalParameters)
                scalaCompileOptions.additionalParameters += params
            else
                scalaCompileOptions.additionalParameters = params
        }
    }
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    
        // Or we use events method:
        events 'standard_out', 'standard_error'
        events "PASSED", "FAILED", "SKIPPED"
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

spotless {
  scala {
    scalafmt()
    // optional: you can specify a specific version or config file
  }
}

afterEvaluate {
    tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))
}

description = "rock-the-jvm-scala-for-beginners"
version = "1.0"

mainClassName = 'lecture.part1basics.Recursion'